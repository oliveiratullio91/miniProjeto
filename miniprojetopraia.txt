import cv2
import numpy as np
import threading
import time
import os
from datetime import datetime


class ImageFilterProcessor:
    def __init__(self):
        self.processed_count = 0
        self.lock = threading.Lock()

    def apply_sepia_filter(self, image_path, output_path):
        """Aplica filtro sépia na imagem"""
        start_time = time.time()
        thread_name = threading.current_thread().name

        print(f"{thread_name}: Processando {os.path.basename(image_path)}")

        # Carrega a imagem
        img = cv2.imread(image_path)
        if img is None:
            print(f"{thread_name}: ERRO - Não foi possível carregar {image_path}")
            return None

        # Aplica filtro sépia
        sepia_filter = np.array([
            [0.272, 0.534, 0.131],
            [0.349, 0.686, 0.168],
            [0.393, 0.769, 0.189]
        ])

        sepia_img = cv2.transform(img, sepia_filter)
        sepia_img = np.clip(sepia_img, 0, 255)
        sepia_img = sepia_img.astype(np.uint8)

        # Salva a imagem processada
        cv2.imwrite(output_path, sepia_img)

        end_time = time.time()
        processing_time = end_time - start_time

        with self.lock:
            self.processed_count += 1

        print(f"{thread_name}: ✅ Concluído - {os.path.basename(output_path)} ({processing_time:.2f}s)")
        return processing_time


def process_images_parallel():
    processor = ImageFilterProcessor()

    # ✅ CAMINHO SIMPLES - o arquivo agora está na raiz do projeto
    images_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "images")

    print(f"📁 Pasta das imagens: {images_dir}")

    # Verifica se a pasta images existe
    if not os.path.exists(images_dir):
        print(f"❌ ERRO: Pasta 'images' não encontrada em {images_dir}")
        return float('inf')

    images = [
        {"input": os.path.join(images_dir, "praia.jpg"),
         "output": os.path.join(images_dir, "praia_sepia.jpg")},
        {"input": os.path.join(images_dir, "praia2.jpg"),
         "output": os.path.join(images_dir, "praia2_sepia.jpg")}
    ]

    # Verifica quais imagens existem
    available_images = []
    for img_info in images:
        if os.path.exists(img_info["input"]):
            available_images.append(img_info)
            print(f"✅ {os.path.basename(img_info['input'])} - Encontrado")
        else:
            print(f"❌ {os.path.basename(img_info['input'])} - Não encontrado")

    if not available_images:
        print("❌ Nenhuma imagem encontrada para processar!")
        return float('inf')

    print(f"\n🎯 Iniciando processamento paralelo de {len(available_images)} imagens")
    start_total = time.time()

    threads = []
    results = []

    def worker(img_info):
        result = processor.apply_sepia_filter(img_info["input"], img_info["output"])
        if result is not None:
            results.append(result)

    for img_info in available_images:
        thread = threading.Thread(
            target=worker,
            args=(img_info,),
            name=f"Thread-{os.path.basename(img_info['input'])}"
        )
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    end_total = time.time()
    total_time = end_total - start_total

    print(f"\n✅ Processamento paralelo concluído")
    print(f"⏱️  Tempo total: {total_time:.2f}s")
    print(f"📊 {len(results)} de {len(available_images)} imagens processadas")

    return total_time if results else float('inf')


if __name__ == "__main__":
    print("=== FILTRO SÉPIA PARALELO ===")
    print("Buscando imagens na pasta 'images'...\n")

    process_images_parallel()

    print("\n🎉 Fim do processamento!")